generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid()) @map("user_id")
  email        String   @unique
  username     String
  firstname    String?
  lastname     String?
  birthDate    String?  @map("birth_date")
  city         String?
  aboutMe      String?  @map("about_me")
  passwordHash String?  @map("password_hash")
  createdAt    DateTime @default(now()) @map("created_at")
  isConfirmed  Boolean  @default(false) @map("is_confirmed")

  devices               Device[]
  confirmationCodes     ConfirmationCode[]
  avatars               Avatar[]
  posts                 Post[]
  postImages            PostImage[]
  passwordRecoveryCodes PasswordRecoveryCode[]
}

model Device {
  id             String   @id @default(uuid()) @map("device_id")
  userId         String   @default(uuid()) @map("user_id")
  ip             String
  title          String
  lastActiveDate DateTime @default(now()) @map("last_activedate")
  expireAt       DateTime @map("expire_at")

  user User @relation(fields: [userId], references: [id])
}

model ConfirmationCode {
  id               String @id @default(uuid()) @map("confiramtion_code_id")
  userId           String @map("user_id")
  confirmationCode String @unique @map("confirmation_code")

  user User @relation(fields: [userId], references: [id])
}

model PasswordRecoveryCode {
  id           String   @id @default(uuid()) @map("password_recovery_code_id")
  email        String
  recoveryCode String   @unique @map("recovery_code")
  createdAt    DateTime @default(now()) @map("created_at")
  active       Boolean

  user User @relation(fields: [email], references: [email])
}

model Avatar {
  id          String   @id @map("user_photo_id")
  uploadPath  String   @unique @map("upload_path")
  contentType String   @map("content_type")
  width       Int
  height      Int
  size        Int
  createdAt   DateTime @default(now()) @map("created_at")
  userId      String   @map("user_id")
  active      Boolean  @default(true)

  user User @relation(fields: [userId], references: [id])
}

model Post {
  id          String   @id @default(uuid()) @map("post_id")
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
  userId      String   @map("user_id")

  user User @relation(fields: [userId], references: [id])

  postImages PostImage[]
}

model PostImage {
  id          String   @id @map("post_image_id")
  uploadPath  String   @unique @map("upload_path")
  contentType String   @map("content_type")
  width       Int
  height      Int
  size        Int
  createdAt   DateTime @default(now()) @map("created_at")
  userId      String   @map("user_id")
  postId      String   @map("post_id")

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])
}
